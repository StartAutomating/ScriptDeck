name: ReleaseModule
on: 
  workflow_dispatch: 
jobs: 
  ReleaseModule: 
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps: 
      - name: Check out repository
        uses: actions/checkout@v2
      - name: ReleaseModule
        id: ReleaseModule
        shell: pwsh
        run: |
          $Parameters = @{}
          $Parameters.ModulePath = ${env:ModulePath}
          $Parameters.UserEmail = ${env:UserEmail}
          $Parameters.UserName = ${env:UserName}
          $Parameters.TagVersionFormat = ${env:TagVersionFormat}
          foreach ($k in @($parameters.Keys)) {
              if ([String]::IsNullOrEmpty($parameters[$k])) {
                  $parameters.Remove($k)
              }
          }
          Write-Host "::debug:: ReleaseModule $(@(foreach ($p in $Parameters.GetEnumerator()) {'-' + $p.Key + ' ' + $p.Value}) -join ' ')"
          & {param(
          [string]
          $ModulePath,
          
          # The user email associated with a git commit.
          [string]
          $UserEmail,
          
          # The user name associated with a git commit.
          [string]
          $UserName,
          
          # The tag version format (default value: 'v$(imported.Version)')
          # This can expand variables.  $imported will contain the imported module.
          [string]
          $TagVersionFormat = 'v$($imported.Version)'
          )
          
          
          $gitHubEvent = if ($env:GITHUB_EVENT_PATH) {
              [IO.File]::ReadAllText($env:GITHUB_EVENT_PATH) | ConvertFrom-Json
          } else { $null }
          
          
          @"
          ::group::GitHubEvent
          $($gitHubEvent | ConvertTo-Json -Depth 100)
          ::endgroup::
          "@ | Out-Host
          
          if (-not ($gitHubEvent.head_commit.message -match "Merge Pull Request #(?<PRNumber>\d+)") -and 
              (-not $gitHubEvent.psobject.properties['inputs'])) {
              "::warning::Pull Request has not merged, skipping" | Out-Host
              return
          }
          
          
          
          $imported = 
          if (-not $ModulePath) {
              $orgName, $moduleName = $env:GITHUB_REPOSITORY -split "/"
              Import-Module ".\$moduleName.psd1" -Force -PassThru -Global
          } else {    
              Import-Module $modulePath -Force -PassThru -Global
          }
          
          if (-not $imported) { return } 
          
          $targetVersion  =$ExecutionContext.InvokeCommand.ExpandString($TagVersionFormat)
          $targetReleaseName = $targetVersion
          $releasesUrl = 'https://api.github.com/repos/${{github.repository_owner}}/${{github.repository}}/releases'
          "ReleasesURL: $releasesUrl"  | Out-Host          
          $listOfReleases = Invoke-RestMethod -Uri $releasesUrl  -Method Get -Headers @{
              "Accept" = "application/vnd.github.v3+json"    
              "Authorization" = 'Bearer ${{ secrets.GITHUB_TOKEN }}'
          } -Erroraction SilentlyContinue
          
          $releaseExists = $listOfReleases | Where-Object tag_name -eq $targetVersion
          
          if ($releaseExists) {
              "::warning::Release '$($releaseExists.name)' Already Exists" | Out-Host
              return
          }
          
          
          Invoke-RestMethod -Uri $releasesUrl  -Method Post -Body (
              [Ordered]@{
                  owner = '${{github.owner}}'
                  repo  = '${{github.repository}}'
                  tag_name = $targetVersion
                  name = "$($imported.Name) $targetVersion"
                  body = 
                      if ($env:RELEASENOTES) {
                          $env:RELEASENOTES
                      } elseif ($imported.PrivateData.PSData.ReleaseNotes) {
                          $imported.PrivateData.PSData.ReleaseNotes
                      } else {
                          "$($imported.Name) $targetVersion"
                      }
                  draft = if ($env:RELEASEISDRAFT) { [bool]::Parse($env:RELEASEISDRAFT) } else { $false }
                  prerelease = if ($env:PRERELEASE) { [bool]::Parse($env:PRERELEASE) } else { $false }
              } | ConvertTo-Json
          ) -Headers @{
              "Accept" = "application/vnd.github.v3+json"
              "Content-type" = "application/json"
              "Authorization" = 'Bearer ${{ secrets.GITHUB_TOKEN }}'
          }
          } @Parameters

